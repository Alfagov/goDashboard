// Code generated by templ@v0.2.364 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Aside() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<aside class=\"col-span-1 row-start-1 row-end-6 rounded bg-white p-4 shadow-lg\"><h2 class=\"mb-4 text-lg font-semibold\">")
		if err != nil {
			return err
		}
		var_2 := `Menu`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><ul><li class=\"mb-2\"><a href=\"#\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_3 := `Overview`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li class=\"mb-2\"><a href=\"#\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_4 := `Analytics`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li class=\"mb-2\"><a href=\"#\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_5 := `Users`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li class=\"mb-2\"><a href=\"#\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_6 := `Settings`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li></ul></aside>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
