// Code generated by templ@v0.2.364 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Alfagov/goDashboard/models"
import "github.com/Alfagov/goDashboard/pkg/htmx"
import "strconv"

func ListGroup(elements []templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"grid grid-cols-1 gap-4 p-4 md:grid-cols-2 md:p-6 lg:grid-cols-3\">")
		if err != nil {
			return err
		}
		for _, e := range elements {
			err = e.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TreeSpecToListElements(spec []*models.TreeSpec) []templ.Component {
	var elements []templ.Component
	for _, child := range spec {
		elements = append(elements, RedirectListGroupElement(child.Name, child.Description, child.Route,
			child.ImageRoute, nil, &models.Size{
				Width:  300,
				Height: 300,
			}))
	}

	return elements
}

func RedirectListGroupElement(title string, description string, route string, imgPath string, extraInfo map[string]string, size *models.Size) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_3 templ.SafeURL = templ.SafeURL(route)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_3)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"card w-96 bg-base-100 shadow-xl transition-transform duration-300 ease-in-out hover:-translate-y-2 hover:shadow-xl\"><figure><img src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(imgPath))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" height=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(size.Height)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"w-96\" alt=\"\"></figure><div class=\"card-body\"><h2 class=\"card-title\">")
		if err != nil {
			return err
		}
		var var_4 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><p>")
		if err != nil {
			return err
		}
		var var_5 string = description
		_, err = templBuffer.WriteString(templ.EscapeString(var_5))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p>")
		if err != nil {
			return err
		}
		if extraInfo != nil {
			_, err = templBuffer.WriteString("<div class=\"card-actions justify-end\">")
			if err != nil {
				return err
			}
			for _, v := range extraInfo {
				_, err = templBuffer.WriteString("<div class=\"badge badge-outline\">")
				if err != nil {
					return err
				}
				var var_6 string = v
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div></a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func LocalListGroupElement(title string, description string, htmx *htmx.Htmx, imgPath string, extraInfo map[string]string, size *models.Size) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(htmx.Route.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(htmx.Swap))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(htmx.Target))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"card w-96 bg-base-100 shadow-xl transition-transform duration-300 ease-in-out hover:-translate-y-2 hover:shadow-xl\"><figure><img src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(imgPath))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" height=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(size.Height)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"w-96\" alt=\"\"></figure><div class=\"card-body\"><h2 class=\"card-title\">")
		if err != nil {
			return err
		}
		var var_8 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><p>")
		if err != nil {
			return err
		}
		var var_9 string = description
		_, err = templBuffer.WriteString(templ.EscapeString(var_9))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p>")
		if err != nil {
			return err
		}
		if extraInfo != nil {
			_, err = templBuffer.WriteString("<div class=\"card-actions justify-end\">")
			if err != nil {
				return err
			}
			for _, v := range extraInfo {
				_, err = templBuffer.WriteString("<div class=\"badge badge-outline\">")
				if err != nil {
					return err
				}
				var var_10 string = v
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
