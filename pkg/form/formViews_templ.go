// Code generated by templ@v0.2.364 DO NOT EDIT.

package form

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Alfagov/goDashboard/models"
import "github.com/Alfagov/goDashboard/pkg/htmx"
import "github.com/Alfagov/goDashboard/pkg/layout"

func GenericForm(formTitle string, fields []templ.Component, widgetLayout *layout.WidgetLayout, htmx *htmx.Htmx) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{layout.ToCSS(widgetLayout) + "bg-base-200 p-4 rounded-lg shadow-lg"}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><h2 class=\"text-2xl font-bold mb-4\">")
		if err != nil {
			return err
		}
		var var_3 string = formTitle
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div id=\"form-error\"></div><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/" + htmx.Route.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"afterbegin\" hx-target=\"#alert-reference-element\">")
		if err != nil {
			return err
		}
		for _, field := range fields {
			err = field.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FormField(data models.Field, baseRoute string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch data.Type {
		case "submit":
			_, err = templBuffer.WriteString("<div class=\"mb-2\"><button type=\"submit\" class=\"btn btn-sm btn-primary\">")
			if err != nil {
				return err
			}
			var var_5 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div>")
			if err != nil {
				return err
			}
		case "select":
			_, err = templBuffer.WriteString("<div class=\"mb-2\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"block text-sm font-medium\">")
			if err != nil {
				return err
			}
			var var_6 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select class=\"select select-bordered w-full max-w-xs\" hx-trigger=\"load\" hx-swap=\"innerHTML\" hx-target=\"this\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/" + baseRoute + data.Route))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_7 := `Loading...`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option></select></div>")
			if err != nil {
				return err
			}
		case "select-remote":
			_, err = templBuffer.WriteString("<div class=\"mb-2\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"block text-sm font-medium\">")
			if err != nil {
				return err
			}
			var var_8 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Type))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-trigger=\"keyup delay:500ms\" hx-swap=\"innerHTML\" hx-select=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("#" + data.Name + "options"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("#" + data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/" + baseRoute + data.Route))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" list=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"input input-bordered w-full max-w-xs\"><datalist id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></datalist></div>")
			if err != nil {
				return err
			}
		case "checkbox":
			_, err = templBuffer.WriteString("<div class=\"mb-2 flex items-center\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\" block text-sm font-medium\">")
			if err != nil {
				return err
			}
			var var_9 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"checkbox\" class=\"checkbox\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></div>")
			if err != nil {
				return err
			}
		default:
			_, err = templBuffer.WriteString("<div class=\"mb-2\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\" block text-sm font-medium\">")
			if err != nil {
				return err
			}
			var var_10 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Type))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"input input-bordered w-full max-w-xs\"></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func SelectOptions(options []string, id string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_11 := templ.GetChildren(ctx)
		if var_11 == nil {
			var_11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		for _, option := range options {
			_, err = templBuffer.WriteString("<option>")
			if err != nil {
				return err
			}
			var var_12 string = option
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
