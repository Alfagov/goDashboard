// Code generated by templ@v0.2.364 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Alfagov/goDashboard/models"
import "github.com/Alfagov/goDashboard/htmx"
import "github.com/Alfagov/goDashboard/layout"

func GenericForm(formTitle string, fields []templ.Component, widgetLayout *layout.WidgetLayout, htmx *htmx.Htmx) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{layout.ToCSS(widgetLayout) + "bg-white p-4 rounded-lg shadow-lg"}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><h2 class=\"text-2xl font-bold mb-4\">")
		if err != nil {
			return err
		}
		var var_3 string = formTitle
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div id=\"form-error\"></div><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/" + htmx.Route.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"afterbegin\" hx-target=\"#alert-reference-element\">")
		if err != nil {
			return err
		}
		for _, field := range fields {
			err = field.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FormField(data models.Field, baseRoute string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch data.Type {
		case "submit":
			_, err = templBuffer.WriteString("<div class=\"mb-4 flex items-center justify-center\">")
			if err != nil {
				return err
			}
			var var_5 = []any{"btn bg-green-500 text-white p-2 rounded-md"}
			err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_6 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div>")
			if err != nil {
				return err
			}
		case "select":
			_, err = templBuffer.WriteString("<div class=\"mb-4\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"block text-sm font-medium text-gray-600\">")
			if err != nil {
				return err
			}
			var var_7 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select class=\"bg-gray-50 mt-2 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" hx-trigger=\"load\" hx-swap=\"innerHTML\" hx-target=\"this\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/" + baseRoute + data.Route))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_8 := `Loading...`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option></select></div>")
			if err != nil {
				return err
			}
		case "select-remote":
			_, err = templBuffer.WriteString("<label class=\"block text-sm font-medium text-gray-600\">")
			if err != nil {
				return err
			}
			var var_9 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <input class=\"mt-1 p-2 w-full border rounded-md\" hx-trigger=\"keyup delay:500ms\" hx-swap=\"innerHTML\" hx-select=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("#" + data.Name + "options"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("#" + data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/" + baseRoute + data.Route))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" list=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></label> <datalist id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name + "list"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></datalist>")
			if err != nil {
				return err
			}
		case "checkbox":
			_, err = templBuffer.WriteString("<div class=\"mb-4 flex items-center\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\" block text-sm font-medium text-gray-600\">")
			if err != nil {
				return err
			}
			var var_10 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Type))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"mt-1 p-2 w-full border rounded-md\"></div>")
			if err != nil {
				return err
			}
		default:
			_, err = templBuffer.WriteString("<div class=\"mb-4\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\" block text-sm font-medium text-gray-600\">")
			if err != nil {
				return err
			}
			var var_11 string = data.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_11))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Type))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(data.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"mt-1 p-2 w-full border rounded-md\"></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func SelectOptions(options []string, id string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		for _, option := range options {
			_, err = templBuffer.WriteString("<option>")
			if err != nil {
				return err
			}
			var var_13 string = option
			_, err = templBuffer.WriteString(templ.EscapeString(var_13))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
