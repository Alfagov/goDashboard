package widgets

import (
	"context"
	"github.com/Alfagov/goDashboard/models"
	"github.com/Alfagov/goDashboard/templates"
	"github.com/a-h/templ"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/oklog/ulid/v2"
	"golang.org/x/net/html"
	"io"
	"math/rand"
)

type BarGraphWidget interface {
	Widget

	Encode() templ.Component
}

func (bgw *barGraphWidget) setName(name string) {
	bgw.BaseWidget.Name = name
}

func (bgw *barGraphWidget) setHeight(height int) {
	bgw.BaseWidget.Layout.Height = height
}

func (bgw *barGraphWidget) setWidth(width int) {
	bgw.BaseWidget.Layout.Width = width
}

func (bgw *barGraphWidget) setId() {
	id := "barWidget_" + bgw.BaseWidget.Name + "_" + ulid.Make().String()
	bgw.BaseWidget.Id = id
}

func (bgw *barGraphWidget) setDescription(description string) {
	//TODO implement me
	panic("implement me")
}

func (bgw *barGraphWidget) setRow(row int) {
	bgw.BaseWidget.Layout.Row = row
}

func (bgw *barGraphWidget) setColumn(column int) {
	bgw.BaseWidget.Layout.Column = column
}

func (bgw *barGraphWidget) withLayout(layout *models.WidgetLayout) {
	bgw.BaseWidget.Layout = layout
}

func (bgw *barGraphWidget) GetRow() int {
	return bgw.BaseWidget.Layout.Row
}

type barGraphWidget struct {
	BaseWidget BaseWidget
	bar        *charts.Bar
}

func test() *charts.Bar {

	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(
		charts.WithTitleOpts(
			opts.Title{
				Title:    "My first bar chart generated by go-echarts",
				Subtitle: "It's extremely easy to use, right?",
			},
		),
		charts.WithToolboxOpts(opts.Toolbox{Show: true}),
		charts.WithLegendOpts(opts.Legend{Show: true, Left: "80%"}),
	)

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	return bar
}

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func findByTag(node *html.Node, tag string) *html.Node {
	if node.Type == html.ElementNode && node.Data == tag {
		return node
	}

	for child := node.FirstChild; child != nil; child = child.NextSibling {
		result := findByTag(child, tag)
		if result != nil {
			return result
		}
	}

	return nil
}

func (bgw *barGraphWidget) Encode() templ.Component {

	renderer := newSnippetRenderer(bgw.bar, bgw.bar.Validate)

	templateChart := templ.ComponentFunc(
		func(ctx context.Context, w io.Writer) error {
			return renderer.Render(w)
		},
	)

	return templates.GeneralGrapg(
		"",
		templateChart,
		bgw.BaseWidget.Layout,
	)
}

func NewBarGraphWidget() BarGraphWidget {
	var widget barGraphWidget
	widget.BaseWidget.Layout = &models.WidgetLayout{
		Row:    4,
		Column: 1,
		Width:  3,
		Height: 3,
	}

	widget.setId()
	widget.bar = test()

	return &widget
}
